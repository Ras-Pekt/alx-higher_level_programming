Test cases for my_list module
=============================
	A class MyList that inherits from list and inside the class,
	Public instance method: def print_sorted(self): that prints the list, but sorted (ascending sort)
	This class assumes that all the elements of the input list areof type int

>>> MyList = __import__('1-my_list').MyList
>>> my_list = MyList()

Test for success cases
======================
	>>> MyList.print_sorted((1, 4, 2, 3, 5))
	[1, 2, 3, 4, 5]

	>>> MyList.print_sorted((1, 4, 1, 5, 5, 8, 10, 21, 21, 4))
	[1, 1, 4, 4, 5, 5, 8, 10, 21, 21]

	>>> MyList.print_sorted((1, -4, 2, -3, 5))
	[-4, -3, 1, 2, 5]

Test for edge cases
===================
	testing with a single int
	-------------------------
	>>> MyList.print_sorted(2)
	Traceback (most recent call last):
	...
	TypeError: 'int' object is not iterable

	testing with a single -ve int
	-------------------------
	>>> MyList.print_sorted(-10)
	Traceback (most recent call last):
	...
	TypeError: 'int' object is not iterable

	testing with a None
	-------------------------
	>>> MyList.print_sorted(None)
	Traceback (most recent call last):
	...
	TypeError: 'NoneType' object is not iterable

	testing with a two ints
	-------------------------
	>>> MyList.print_sorted(6, 2)
	Traceback (most recent call last):
	...
	TypeError: MyList.print_sorted() takes 1 positional argument but 2 were given

	testing with no arguments
	-------------------------
	>>> MyList.print_sorted()
	Traceback (most recent call last):
	...
	TypeError: MyList.print_sorted() missing 1 required positional argument: 'self'
